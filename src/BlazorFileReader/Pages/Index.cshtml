@page "/"
@using System.IO;
@inject IFileReaderService fileReaderService;
<h1>Hello, files!</h1>

Welcome to your new filestreaming app.<br />
This demo reads a file without doing anything particular with it.<br />
There are other demos in the menu.<br /><br />

<FileReader ReaderRef="@Reader" />
<button onclick="@ReadFile" class="btn btn-primary">Read file</button>
<br /><br />
<em>Progress: @this.progress</em><br />
<textarea style="max-width: 100%;" cols="50" rows="20">@Output</textarea>
@functions {
    private int progress = 0;
    IFileReaderRef Reader;

    string Output { get; set; }

    protected override void OnInit()
    {
        Reader = fileReaderService.CreateReference();
        base.OnInit();
    }

    public async Task ReadFile()
    {
        Output = string.Empty;
        this.StateHasChanged();
        var nl = Environment.NewLine;
        foreach (var file in await Reader.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{nl}";
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{nl}";
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{nl}";
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
            Output += $"Reading file...";
            this.StateHasChanged();

            using (var fs = await file.OpenReadAsync(this.LogCallback))
            {
                var bufferSize = 4096;
                var buffer = new byte[bufferSize];
                int count;
                while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    Output += $"Read {count} bytes. {fs.Position} / {fs.Length}{nl}";
                    this.StateHasChanged();
                }
                Output += $"Done reading file {fileInfo.Name}{nl}.";
            }
            this.StateHasChanged();
        }

    }

    private void LogCallback(long position, int offset, long length)
    {
        var progress = (int)( (double)position / length * 100 );
        if ( progress == this.progress )
            return;
 
        this.progress = progress;
        Console.WriteLine($"Progress: Position:{position} | Offset:{offset} | Length:{length}");
        this.StateHasChanged();
    }
}



